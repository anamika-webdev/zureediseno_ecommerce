// prisma/schema.prisma - Complete schema with all required models
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id            String        @id @default(cuid())
  name          String        @db.VarChar(255)
  slug          String        @unique @db.VarChar(255)
  description   String?       @db.Text
  image         String?       @db.VarChar(500)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  featured      Boolean       @default(false)
  sortOrder     Int           @default(0)
  products      Product[]
  subcategories Subcategory[]

  @@index([sortOrder])
  @@index([featured])
  @@map("categories")
}

model Subcategory {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?   @db.Text
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  featured    Boolean   @default(false)
  sortOrder   Int       @default(0)
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([sortOrder])
  @@index([featured])
  @@map("subcategories")
}

model Product {
  id            String           @id @default(cuid())
  name          String           @db.VarChar(255)
  slug          String           @unique @db.VarChar(255)
  description   String?          @db.Text
  price         Decimal          @db.Decimal(10, 2)
  originalPrice Decimal?         @db.Decimal(10, 2)
  sku           String?          @unique @db.VarChar(255)
  inStock       Boolean          @default(true)
  featured      Boolean          @default(false)
  categoryId    String
  subcategoryId String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  sortOrder     Int              @default(0)
  orderItems    OrderItem[]
  images        ProductImage[]
  variants      ProductVariant[]
  category      Category         @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([featured])
  @@index([inStock])
  @@index([sortOrder])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String   @db.VarChar(500)
  alt       String?  @db.VarChar(255)
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_images")
}

model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  size       String   @db.VarChar(50)
  color      String   @db.VarChar(50)
  sleeveType String?  @db.VarChar(50)
  stock      Int      @default(0)
  sku        String?  @unique @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size, color, sleeveType])
  @@index([productId])
  @@map("product_variants")
}

// Enhanced User model with all required fields
model User {
  id            String                @id @default(cuid())
  email         String                @unique @db.VarChar(255)
  firstName     String?               @db.VarChar(100)
  lastName      String?               @db.VarChar(100)
  phone         String?               @db.VarChar(20)          // NEW: Phone number
  imageUrl      String?               @db.VarChar(500)
  role          String                @default("USER") @db.VarChar(20)
  isActive      Boolean               @default(true)           // NEW: Account status
  lastLoginAt   DateTime?             @map("last_login_at")    // NEW: Last login tracking
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  password      String?               @db.VarChar(255)
  
  // Relations
  orders        Order[]
  payments      Payment[]             // NEW: Payment relation
  adminLogs     AdminLog[]            // NEW: Admin logs relation
  notifications SystemNotification[]  // NEW: Notifications relation
  connections   WebSocketConnection[] // NEW: WebSocket connections relation

  @@index([role])
  @@index([isActive])
  @@index([email])
  @@map("users")
}

// Enhanced Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @map("order_number")
  userId          String?     @map("user_id")
  guestOrder      Boolean     @default(false) @map("guest_order")
  trackingNumber  String?     @map("tracking_number")
  notes           String?     @db.Text
  totalAmount     Float       @map("total_amount")
  status          String      @default("pending") @db.VarChar(50)
  paymentStatus   String      @default("pending") @map("payment_status") @db.VarChar(50)
  paymentMethod   String      @default("cod") @map("payment_method") @db.VarChar(50)
  transactionId   String?     @map("transaction_id") @db.VarChar(255)
  gatewayResponse Json?       @map("gateway_response")
  shippingName    String      @map("shipping_name") @db.VarChar(255)
  shippingEmail   String      @map("shipping_email") @db.VarChar(255)
  shippingPhone   String      @map("shipping_phone") @db.VarChar(20)
  shippingAddress String      @map("shipping_address") @db.Text
  shippingCity    String      @map("shipping_city") @db.VarChar(100)
  shippingState   String      @map("shipping_state") @db.VarChar(100)
  shippingPincode String      @map("shipping_pincode") @db.VarChar(10)
  shippingCountry String      @default("India") @map("shipping_country") @db.VarChar(100)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  user        User?       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  payments    Payment[]

  @@index([guestOrder, shippingEmail], map: "idx_orders_guest_email")
  @@index([orderNumber], map: "idx_orders_order_number")
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String   @map("order_id")
  productId   String?  @map("product_id")
  productName String   @map("product_name") @db.VarChar(255)
  productSlug String?  @map("product_slug") @db.VarChar(255)
  quantity    Int
  price       Float
  size        String?  @db.VarChar(50)
  color       String?  @db.VarChar(50)
  imageUrl    String?  @map("image_url") @db.VarChar(500)
  createdAt   DateTime @default(now()) @map("created_at")
  
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// NEW: Dedicated Payment model
model Payment {
  id              String   @id @default(cuid())
  orderId         String   @map("order_id")
  userId          String?  @map("user_id")
  orderNumber     String   @map("order_number")
  customerName    String   @map("customer_name") @db.VarChar(255)
  customerEmail   String   @map("customer_email") @db.VarChar(255)
  amount          Float
  paymentMethod   String   @map("payment_method") @db.VarChar(50)
  status          String   @default("pending") @db.VarChar(50)
  transactionId   String?  @map("transaction_id") @db.VarChar(255)
  gatewayResponse Json?    @map("gateway_response")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  completedAt     DateTime? @map("completed_at")
  refundedAt      DateTime? @map("refunded_at")
  refundAmount    Float?   @map("refund_amount")
  fees            Float?   @default(0)
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
  @@index([transactionId])
  @@map("payments")
}

// NEW: Admin action logging
model AdminLog {
  id        String   @id @default(cuid())
  adminId   String   @map("admin_id")
  action    String   @db.VarChar(100)
  entityType String  @map("entity_type") @db.VarChar(50)
  entityId  String   @map("entity_id")
  oldValues Json?    @map("old_values")
  newValues Json?    @map("new_values")
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  
  admin User @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@map("admin_logs")
}

// NEW: System notifications
model SystemNotification {
  id        String   @id @default(cuid())
  type      String   @db.VarChar(50)
  title     String   @db.VarChar(255)
  message   String   @db.Text
  data      Json?
  isRead    Boolean  @default(false) @map("is_read")
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")
  
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("system_notifications")
}

// NEW: Analytics cache
model AnalyticsCache {
  id          String   @id @default(cuid())
  key         String   @unique @db.VarChar(100)
  data        Json
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([key])
  @@index([expiresAt])
  @@map("analytics_cache")
}

// NEW: WebSocket connections
model WebSocketConnection {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  connectionId String  @unique @map("connection_id")
  type        String   @db.VarChar(50)
  isActive    Boolean  @default(true) @map("is_active")
  lastPing    DateTime @default(now()) @map("last_ping")
  createdAt   DateTime @default(now()) @map("created_at")
  
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([isActive])
  @@index([lastPing])
  @@map("websocket_connections")
}