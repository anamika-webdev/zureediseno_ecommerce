generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id            String        @id @default(cuid())
  name          String        @db.VarChar(255)
  slug          String        @unique @db.VarChar(255)
  description   String?       @db.Text
  image         String?       @db.VarChar(500)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  featured      Boolean       @default(false)
  sortOrder     Int           @default(0)
  products      Product[]
  subcategories Subcategory[]

  @@index([sortOrder])
  @@index([featured])
  @@map("categories")
}

model Subcategory {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?   @db.Text
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  featured    Boolean   @default(false)
  sortOrder   Int       @default(0)
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([sortOrder])
  @@index([featured])
  @@map("subcategories")
}

model Product {
  id            String           @id @default(cuid())
  name          String           @db.VarChar(255)
  slug          String           @unique @db.VarChar(255)
  description   String?          @db.Text
  price         Decimal          @db.Decimal(10, 2)
  originalPrice Decimal?         @db.Decimal(10, 2)
  sku           String?          @unique @db.VarChar(255)
  inStock       Boolean          @default(true)
  featured      Boolean          @default(false)
  categoryId    String
  subcategoryId String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  sortOrder     Int              @default(0)
  orderItems    OrderItem[]
  images        ProductImage[]
  variants      ProductVariant[]
  category      Category         @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([featured])
  @@index([inStock])
  @@index([sortOrder])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String   @db.VarChar(500)
  alt       String?  @db.VarChar(255)
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_images")
}

model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  size       String   @db.VarChar(50)
  color      String   @db.VarChar(50)
  sleeveType String?  @db.VarChar(50)
  stock      Int      @default(0)
  sku        String?  @unique @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size, color, sleeveType])
  @@index([productId])
  @@map("product_variants")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique @db.VarChar(255)
  firstName     String?   @db.VarChar(100)
  lastName      String?   @db.VarChar(100)
  imageUrl      String?   @db.VarChar(500)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]

  // Keep clerkId for migration - can be removed later
  clerkId       String?   @unique @db.VarChar(255)

  // Add password field for custom auth
  password      String?   @db.VarChar(255)

  @@index([role])
  @@map("users")
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  email             String        @db.VarChar(255)
  firstName         String        @db.VarChar(100)
  lastName          String        @db.VarChar(100)
  phone             String        @db.VarChar(20)
  address           String        @db.Text
  city              String        @db.VarChar(100)
  state             String        @db.VarChar(100)
  zipCode           String        @db.VarChar(20)
  country           String        @db.VarChar(100)
  subtotal          Float
  tax               Float
  shipping          Float
  total             Float
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String        @db.VarChar(50)
  razorpayOrderId   String?       @db.VarChar(255)
  razorpayPaymentId String?       @db.VarChar(255)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  orderItems        OrderItem[]
  user              User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String   @db.VarChar(50)
  color     String   @db.VarChar(50)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

enum UserRole {
  USER
  ADMIN
  SELLER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}