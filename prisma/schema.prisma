// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // or "mysql" or "sqlite" depending on your database
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products     Product[]
  subcategories Subcategory[]
  
  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]
  
  @@map("subcategories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String?
  price         Float
  originalPrice Float?
  sku           String?  @unique
  inStock       Boolean  @default(true)
  featured      Boolean  @default(false)
  categoryId    String
  subcategoryId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  category    Category     @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  orderItems  OrderItem[]
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  productId String
  createdAt DateTime @default(now())
  
  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductVariant {
  id         String @id @default(cuid())
  productId  String
  size       String
  color      String
  sleeveType String? // Added sleeve type option
  stock      Int    @default(0)
  sku        String? @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, size, color, sleeveType])
  @@map("product_variants")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders Order[]
  
  @@map("users")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  email           String
  firstName       String
  lastName        String
  phone           String
  address         String
  city            String
  state           String
  zipCode         String
  country         String
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String
  razorpayOrderId String?
  razorpayPaymentId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String
  color     String
  createdAt DateTime @default(now())
  
  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}


